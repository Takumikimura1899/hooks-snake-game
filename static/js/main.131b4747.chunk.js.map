{"version":3,"sources":["utils/index.js","constants/index.js","components/Navigation.jsx","components/Field.jsx","components/Button.jsx","components/ManipulationPanel.jsx","hooks/useSnakeGame.js","App.js","reportWebVitals.js","index.js"],"names":["getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","fields","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","OppositeDirection","Delta","Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","map","row","column","Button","status","onStart","onStop","onRestart","ManipulationPanel","onChange","timer","unsubscribe","clearInterval","useSnakeGame","useState","setFields","body","setBody","setStatus","direction","setDirection","setDifficulty","tick","setTick","useEffect","setInterval","handleMoving","updateDirection","useCallback","newDirection","updateDifficulty","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","delta","newPosition","position","isCollision","isEatingMyself","newBody","removingTrack","pop","unshift","start","stop","reload","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.131b4747.chunk.js","sourcesContent":["export const getFoodPosition = (fieldSize, excludes) => {\n  while (true) {\n    const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n    const conflict = excludes.some((item) => item.x === x && item.y === y);\n    if (!conflict) {\n      return { x, y };\n    }\n  }\n};\n\nexport const initFields = (fieldSize, snake) => {\n  const fields = [];\n  for (let i = 0; i < fieldSize; i++) {\n    const cols = new Array(fieldSize).fill(\"\");\n    fields.push(cols);\n  }\n  fields[snake.y][snake.x] = \"snake\";\n  //   fields[17][5] = \"snake\";\n  // fields[10][1] = \"food\";\n\n  const food = getFoodPosition(fieldSize, [snake]);\n  fields[food.y][food.x] = \"food\";\n\n  return fields; //作成した配列を返却\n};\n\nexport const isCollision = (fieldSize, position) => {\n  if (position.y < 0 || position.x < 0) {\n    // x,yのどちらかの座標がマイナスの値の時\n    return true;\n  }\n  if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n    // x,yのどちらかの座標がフィールドサイズを超えてしまっている時\n    return true;\n  }\n\n  return false;\n};\n\nexport const isEatingMyself = (fields, position) => {\n  return fields[position.y][position.x] === \"snake\";\n};\n","import { initFields } from \"../utils\";\n\nconst fieldSize = 35;\nexport const initialPosition = { x: 17, y: 17 };\nexport const initialValues = initFields(fieldSize, initialPosition);\nexport const defaultInterval = 200;\nexport const defaultDifficulty = 3;\n\nexport const Difficulty = [500, 300, 200, 100, 50];\n\nexport const GameStatus = Object.freeze({\n  init: \"init\",\n  playing: \"playing\",\n  suspended: \"suspended\",\n  gameover: \"gameover\",\n});\n\nexport const Direction = Object.freeze({\n  up: \"up\",\n  right: \"right\",\n  left: \"left\",\n  down: \"down\",\n});\n\nexport const DirectionKeyCodeMap = Object.freeze({\n  37: Direction.left,\n  38: Direction.up,\n  39: Direction.right,\n  40: Direction.down,\n});\n\nexport const OppositeDirection = Object.freeze({\n  up: \"down\",\n  right: \"left\",\n  left: \"right\",\n  down: \"up\",\n});\n\nexport const Delta = Object.freeze({\n  up: { x: 0, y: -1 },\n  right: { x: 1, y: 0 },\n  left: { x: -1, y: 0 },\n  down: { x: 0, y: 1 },\n});\n","import { defaultDifficulty, Difficulty } from \"../constants\";\n\nconst Navigation = ({\n  length,\n  difficulty = defaultDifficulty,\n  onChangeDifficulty,\n}) => {\n  const upVisibility = difficulty < Difficulty.length ? \"\" : \"is-hidden\";\n  const downVisibility = difficulty > 1 ? \"\" : \"is-hidden\";\n  const onUpDifficulty = () => onChangeDifficulty(difficulty + 1);\n  const onDownDifficulty = () => onChangeDifficulty(difficulty - 1);\n\n  return (\n    <div className=\"navigation\">\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Length: </span>\n        <div className=\"navigation-item-number-container\">\n          <div className=\"num-board\">{length}</div>\n        </div>\n      </div>\n      <div className=\"navigation-item\">\n        <span className=\"navigation-label\">Difficulty: </span>\n        <div className=\"navigation-item-number-container\">\n          <span className=\"num-board\">{difficulty}</span>\n          <div className=\"difficulty-button-container\">\n            <div\n              className={`difficulty-button difficulty-up ${upVisibility}`}\n              onClick={onUpDifficulty}\n            ></div>\n            <div\n              className={`difficulty-button difficulty-down ${downVisibility}`}\n              onClick={onDownDifficulty}\n            ></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navigation;\n","const Field = ({ fields }) => {\n  return (\n    <div className=\"field\">\n      {fields.map((row) => {\n        return row.map((column) => {\n          return <div className={`dots ${column}`}></div>;\n        });\n      })}\n    </div>\n  );\n};\n\nexport default Field;\n","import { GameStatus } from \"../constants\";\n\nconst Button = ({ status, onStart, onStop, onRestart }) => {\n  return (\n    <div className=\"button\">\n      {status === GameStatus.gameover && (\n        <button className=\"btn btn-gameover\" onClick={onRestart}>\n          gameover\n        </button>\n      )}\n      {status === GameStatus.init && (\n        <button className=\"btn btn-init\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === GameStatus.suspended && (\n        <button className=\"btn btn-suspended\" onClick={onStart}>\n          start\n        </button>\n      )}\n      {status === GameStatus.playing && (\n        <button className=\"btn btn-playing\" onClick={onStop}>\n          stop\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Button;\n","// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import {\n//   faArrowLeft,\n//   faArrowUp,\n//   faArrowDown,\n//   faArrowRight,\n// } from \"@fortawesome/free-solid-svg-icons\";\nimport { Direction } from \"../constants\";\n\nconst ManipulationPanel = ({ onChange }) => {\n  const onUp = () => onChange(Direction.up);\n  const onRight = () => onChange(Direction.right);\n  const onLeft = () => onChange(Direction.left);\n  const onDown = () => onChange(Direction.down);\n\n  return (\n    <div className=\"manipulation-panel\">\n      <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n        👈\n      </button>\n      <div>\n        <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n          👆\n        </button>\n        <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n          👇\n        </button>\n      </div>\n      <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n        👉\n      </button>\n    </div>\n  );\n};\n\nexport default ManipulationPanel;\n","import { useCallback, useEffect, useState } from \"react\";\nimport {\n  defaultInterval,\n  defaultDifficulty,\n  initialPosition,\n  initialValues,\n  Delta,\n  Difficulty,\n  Direction,\n  DirectionKeyCodeMap,\n  GameStatus,\n  OppositeDirection,\n} from \"../constants\";\nimport {\n  initFields,\n  isCollision,\n  isEatingMyself,\n  getFoodPosition,\n} from \"../utils\";\n\nlet timer = null;\n\nconst unsubscribe = () => {\n  if (!timer) {\n    return;\n  }\n  clearInterval(timer);\n};\n\nconst useSnakeGame = () => {\n  const [fields, setFields] = useState(initialValues);\n  const [body, setBody] = useState([]);\n  const [status, setStatus] = useState(GameStatus.init);\n  const [direction, setDirection] = useState(Direction.up);\n  const [difficulty, setDifficulty] = useState(defaultDifficulty);\n  const [tick, setTick] = useState(0);\n\n  useEffect(() => {\n    setBody([initialPosition]);\n\n    // ゲームの中の時間を管理する\n    const interval = Difficulty[difficulty - 1];\n    timer = setInterval(() => {\n      setTick((tick) => tick + 1);\n    }, interval);\n    return unsubscribe;\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (body.length === 0 || status !== GameStatus.playing) {\n      return;\n    }\n    const canContinue = handleMoving();\n    if (!canContinue) {\n      unsubscribe();\n      setStatus(GameStatus.gameover);\n    }\n  }, [tick]);\n\n  const start = () => setStatus(GameStatus.playing);\n\n  const stop = () => setStatus(GameStatus.suspended);\n\n  const reload = () => {\n    timer = setInterval(() => {\n      setTick((tick) => tick + 1);\n    }, defaultInterval);\n    setStatus(GameStatus.init);\n    setBody([initialPosition]);\n    setDirection(Direction.up);\n    setDifficulty(defaultDifficulty);\n    setFields(initFields(fields.length, initialPosition));\n  };\n\n  const updateDirection = useCallback(\n    (newDirection) => {\n      if (status !== GameStatus.playing) {\n        return;\n      }\n      if (OppositeDirection[direction] === newDirection) {\n        return;\n      }\n      setDirection(newDirection);\n    },\n    [direction, status]\n  );\n\n  const updateDifficulty = useCallback(\n    (difficulty) => {\n      if (status !== GameStatus.init) {\n        return;\n      }\n      if (difficulty < 1 || difficulty > Difficulty.length) {\n        return;\n      }\n      setDifficulty(difficulty);\n    },\n    [status]\n  );\n\n  useEffect(() => {\n    const handleKeyDown = (e) => {\n      const newDirection = DirectionKeyCodeMap[e.keyCode];\n      if (!newDirection) {\n        return;\n      }\n      updateDirection(newDirection);\n    };\n    document.addEventListener(\"keydown\", handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [updateDirection]);\n\n  const handleMoving = () => {\n    const { x, y } = body[0];\n    const delta = Delta[direction];\n    const newPosition = {\n      x: x + delta.x,\n      y: y + delta.y,\n    };\n    if (\n      isCollision(fields.length, newPosition) ||\n      isEatingMyself(fields, newPosition)\n    ) {\n      return false;\n    }\n    const newBody = [...body];\n    if (fields[newPosition.y][newPosition.x] !== \"food\") {\n      const removingTrack = newBody.pop();\n      fields[removingTrack.y][removingTrack.x] = \"\";\n    } else {\n      const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n      fields[food.y][food.x] = \"food\";\n    }\n    fields[newPosition.y][newPosition.x] = \"snake\";\n    newBody.unshift(newPosition);\n\n    setBody(newBody);\n    setFields(fields);\n    return true;\n  };\n  return {\n    body,\n    difficulty,\n    fields,\n    status,\n    start,\n    stop,\n    reload,\n    updateDirection,\n    updateDifficulty,\n  };\n};\n\nexport default useSnakeGame;\n","import \"./App.css\";\n// import { useCallback, useState, useEffect } from \"react\";\nimport Navigation from \"./components/Navigation\";\nimport Field from \"./components/Field\";\nimport Button from \"./components/Button\";\nimport ManipulationPanel from \"./components/ManipulationPanel\";\nimport useSnakeGame from \"./hooks/useSnakeGame\";\n// import {\n//   defaultInterval,\n//   defaultDifficulty,\n//   Delta,\n//   Difficulty,\n//   Direction,\n//   DirectionKeyCodeMap,\n//   GameStatus,\n//   OppositeDirection,\n//   initialPosition,\n//   initialValues,\n// } from \"./constants\";\n// import { initFields, getFoodPosition } from \"./utils\";\n\n// const fieldSize = 35;\n// const initialPosition = { x: 17, y: 17 };\n// const initialValues = initFields(fieldSize, initialPosition);\n// const defaultInterval = 200;\n// const defaultDifficulty = 3;\n\n// const Difficulty = [500, 300, 200, 100, 50];\n\n// const GameStatus = Object.freeze({\n//   init: \"init\",\n//   playing: \"playing\",\n//   suspended: \"suspended\",\n//   gameover: \"gameover\",\n// });\n\n// const Direction = Object.freeze({\n//   up: \"up\",\n//   right: \"right\",\n//   left: \"left\",\n//   down: \"down\",\n// });\n\n// const DirectionKeyCodeMap = Object.freeze({\n//   37: Direction.left,\n//   38: Direction.up,\n//   39: Direction.right,\n//   40: Direction.down,\n// });\n\n// const OppositeDirection = Object.freeze({\n//   up: \"down\",\n//   right: \"left\",\n//   left: \"right\",\n//   down: \"up\",\n// });\n\n// const Delta = Object.freeze({\n//   up: { x: 0, y: -1 },\n//   right: { x: 1, y: 0 },\n//   left: { x: -1, y: 0 },\n//   down: { x: 0, y: 1 },\n// });\n\n// let timer = undefined;\n\n// const unsubscribe = () => {\n//   if (!timer) {\n//     return;\n//   }\n//   clearInterval(timer);\n// };\n\n// const isCollision = (fieldSize, position) => {\n//   if (position.y < 0 || position.x < 0) {\n//     return true;\n//   }\n\n//   if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n//     return true;\n//   }\n\n//   return false;\n// };\n\n// const isEatingMyself = (fields, position) => {\n//   return fields[position.y][position.x] === \"snake\";\n// };\n\nfunction App() {\n  // const [fields, setFields] = useState(initialValues);\n  // const [body, setBody] = useState([]);\n  // const [status, setStatus] = useState(GameStatus.init);\n  // const [direction, setDirection] = useState(Direction.up);\n  // const [difficulty, setDifficulty] = useState(defaultDifficulty);\n  // const [tick, setTick] = useState(0);\n\n  // useEffect(() => {\n  //   setBody([initialPosition]);\n  //   // ゲーム中の時間を管理する\n  //   const interval = Difficulty[difficulty-1];\n  //   timer = setInterval(() => {\n  //     setTick((tick) => tick + 1);\n  //   }, interval);\n  //   return unsubscribe;\n  // }, [difficulty]);\n\n  // const onStart = () => setStatus(GameStatus.playing);\n\n  // const onStop = () => setStatus(GameStatus.suspended);\n\n  // const onRestart = () => {\n  //   timer = setInterval(() => {\n  //     setTick((tick) => tick + 1);\n  //   }, defaultInterval);\n  //   setStatus(GameStatus.init);\n  //   setBody([initialPosition]);\n  //   setDirection(Direction.up);\n  //   setDifficulty(defaultDifficulty);\n  //   setFields(initFields(35, initialPosition));\n  // };\n\n  // const onChangeDirection = useCallback(\n  //   (newDirection) => {\n  //     if (status !== GameStatus.playing) {\n  //       return direction;\n  //     }\n  //     if (OppositeDirection[direction] === newDirection) {\n  //       return;\n  //     }\n  //     setDirection(newDirection);\n  //   },\n  //   [direction, status]\n  // );\n  // const onChangeDifficulty = useCallback(\n  //   (difficulty) => {\n  //     if (status !== GameStatus.init) {\n  //       return;\n  //     }\n  //     setDifficulty(difficulty);\n  //   },\n  //   [status, difficulty]\n  // );\n\n  // useEffect(() => {\n  //   const handleKeyDown = (e) => {\n  //     const newDirection = DirectionKeyCodeMap[e.keyCode];\n  //     if (!newDirection) {\n  //       return;\n  //     }\n  //     onChangeDirection(newDirection);\n  //   };\n  //   document.addEventListener(\"keydown\", handleKeyDown);\n  //   return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  // }, [onChangeDirection]);\n\n  // const handleMoving = () => {\n  //   const { x, y } = body[0];\n  //   const delta = Delta[direction];\n  //   const newPosition = {\n  //     x: x + delta.x,\n  //     y: y + delta.y,\n  //   };\n  //   if (\n  //     isCollision(fields.length, newPosition) ||\n  //     isEatingMyself(fields, newPosition)\n  //   ) {\n  //     return false;\n  //   }\n  //   const newBody = [...body];\n  //   if (fields[newPosition.y][newPosition.x] !== \"food\") {\n  //     const removingTrack = newBody.pop();\n  //     fields[removingTrack.y][removingTrack.x] = \"\";\n  //   } else {\n  //     const food = getFoodPosition(fields.length, [...newBody, newPosition]);\n  //     fields[food.y][food.x] = \"food\";\n  //   }\n  //   fields[newPosition.y][newPosition.x] = \"snake\";\n  //   newBody.unshift(newPosition);\n  //   setBody(newBody);\n  //   setFields(fields);\n  //   return true;\n  // };\n\n  const {\n    body,\n    difficulty,\n    fields,\n    start,\n    stop,\n    reload,\n    status,\n    updateDirection,\n    updateDifficulty,\n  } = useSnakeGame();\n\n  // useEffect(() => {\n  //   if (body.length === 0 || status !== GameStatus.playing) {\n  //     return;\n  //   }\n  //   const canContinue = handleMoving();\n  //   if (!canContinue) {\n  //     unsubscribe();\n  //     setStatus(GameStatus.gameover);\n  //   }\n  // }, [tick]);\n\n  // console.log(\"direction\", direction);\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title-container\">\n          <h1 className=\"title\">Snake Game</h1>\n        </div>\n        <Navigation\n          length={body.length}\n          difficulty={difficulty}\n          onChangeDifficulty={updateDifficulty}\n        />\n      </header>\n      <main className=\"main\">\n        <Field fields={fields} />\n      </main>\n\n      <footer className=\"footer\">\n        <Button\n          status={status}\n          onStop={stop}\n          onStart={start}\n          onRestart={reload}\n        />\n        <ManipulationPanel onChange={updateDirection} />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}